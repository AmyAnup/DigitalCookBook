package dao.categoryDao;

/*
 * Author: @AmyAnup
 * Date: 14/10/25
 *
 * CategoryDAO.java
 * DAO class to manage recipe categories in the database.
 * Supports: Add, Read (All), Update, Delete categories.
 */

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

// Category model class representing the 'categories' table in the database
class Category {
    private int id;       // Unique identifier for the category (Primary Key)
    private String name;  // Name of the category

    // Constructor for existing categories (with ID)
    public Category(int id, String name) {
        this.id = id;
        this.name = name;
    }

    // Constructor for new categories (ID auto-generated by DB)
    public Category(String name) {
        this.name = name;
    }

    // Getters and setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
}

public class CategoryDAO {
    private Connection conn; // Database connection object

    // DAO constructor initializes with an active database connection
    public CategoryDAO(Connection conn) {
        this.conn = conn;
    }

    /**
     * Add a new category to the database.
     * @param category The Category object to add.
     * @return true if insertion was successful, false otherwise.
     */
    public boolean addCategory(Category category) {
        String sql = "INSERT INTO categories(name) VALUES(?)"; // SQL query
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, category.getName()); // Set category name
            int rows = stmt.executeUpdate();       // Execute insert
            return rows > 0;                       // Return true if at least one row inserted
        } catch (SQLException e) {
            System.out.println("Error adding category: " + e.getMessage());
            return false;
        }
    }

    /**
     * Fetch all categories from the database.
     * @return List of Category objects.
     */
    public List<Category> getAllCategories() {
        List<Category> categories = new ArrayList<>();
        String sql = "SELECT * FROM categories";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) { // Execute query
            while (rs.next()) {
                // Map each row to a Category object and add to list
                categories.add(new Category(rs.getInt("id"), rs.getString("name")));
            }
        } catch (SQLException e) {
            System.out.println("Error fetching categories: " + e.getMessage());
        }
        return categories; // Return the list (empty if none found)
    }

    /**
     * Get a single category by its ID.
     * @param id The category ID.
     * @return Category object if found, null otherwise.
     */
    public Category getCategoryById(int id) {
        String sql = "SELECT * FROM categories WHERE id=?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id); // Set ID parameter
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                // Map result row to Category object
                return new Category(rs.getInt("id"), rs.getString("name"));
            }
        } catch (SQLException e) {
            System.out.println("Error fetching category: " + e.getMessage());
        }
        return null; // Return null if not found
    }

    /**
     * Update an existing category in the database.
     * @param category The Category object with updated details.
     * @return true if update was successful, false otherwise.
     */
    public boolean updateCategory(Category category) {
        String sql = "UPDATE categories SET name=? WHERE id=?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, category.getName()); // Set new name
            stmt.setInt(2, category.getId());      // Set category ID to update
            int rows = stmt.executeUpdate();       // Execute update
            return rows > 0;                       // True if at least one row affected
        } catch (SQLException e) {
            System.out.println("Error updating category: " + e.getMessage());
            return false;
        }
    }

    /**
     * Delete a category from the database.
     * @param id The ID of the category to delete.
     * @return true if deletion was successful, false otherwise.
     */
    public boolean deleteCategory(int id) {
        String sql = "DELETE FROM categories WHERE id=?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id); // Set category ID
            int rows = stmt.executeUpdate(); // Execute deletion
            return rows > 0;     // True if at least one row deleted
        } catch (SQLException e) {
            System.out.println("Error deleting category: " + e.getMessage());
            return false;
        }
    }

    /**
     * Check if a category with the given name already exists.
     * Useful to avoid duplicate category entries.
     * @param name The category name to check.
     * @return true if category exists, false otherwise.
     */
    public boolean categoryExists(String name) {
        String sql = "SELECT id FROM categories WHERE name=?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, name);
            ResultSet rs = stmt.executeQuery();
            return rs.next(); // Returns true if at least one row exists
        } catch (SQLException e) {
            System.out.println("Error checking category: " + e.getMessage());
            return false;
        }
    }
}
