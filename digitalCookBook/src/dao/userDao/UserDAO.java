package dao.recipeDao;

import dao.dbConnection.DBConnection;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Recipe;

/*
 * Author: @AmyAnup
 * Date: 12/10/25
 *
 * RecipeDAO.java
 * Data Access Object (DAO) class for managing recipes in the database.
 * Provides CRUD operations (Create, Read, Update, Delete) for the Recipe model.
 * Utilizes DBConnection to establish connections with the MySQL database.
 */

public class RecipeDAO {

    /**
     * Adds a new recipe to the database.
     * The recipe_id is automatically generated by the database and updated in the Recipe object.
     *
     * @param recipe Recipe object containing all recipe details
     * @throws ClassNotFoundException if the JDBC driver is not found
     */
    public void addRecipe(Recipe recipe) throws ClassNotFoundException {
        String sql = "INSERT INTO recipe (title, ingredients, instructions, category, user_id) VALUES (?, ?, ?, ?, ?)";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            // Bind values from the Recipe object to the SQL INSERT query
            stmt.setString(1, recipe.getTitle());
            stmt.setString(2, recipe.getIngredients());
            stmt.setString(3, recipe.getInstructions());
            stmt.setString(4, recipe.getCategory());
            stmt.setInt(5, recipe.getUser_id());

            stmt.executeUpdate(); // Execute the INSERT statement

            // Retrieve the auto-generated recipe_id and set it in the Recipe object
            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                recipe.setRecipe_Id(rs.getInt(1));
            }

            System.out.println("‚úÖ Recipe added successfully! ID: " + recipe.getRecipe_Id());

        } catch (SQLException e) {
            // Log SQL exceptions with details
            System.err.println("‚ùå Error adding recipe: " + e.getMessage());
        }
    }

    /**
     * Retrieves all recipes for a specific user, sorted by creation date (latest first).
     *
     * @param userId The ID of the user whose recipes are to be fetched
     * @return List of Recipe objects (returns empty list if none found)
     * @throws ClassNotFoundException if the JDBC driver is not found
     */
    public List<Recipe> getAllRecipes(int userId) throws ClassNotFoundException {
        List<Recipe> list = new ArrayList<>();
        String sql = "SELECT * FROM recipe WHERE user_id = ? ORDER BY created_at DESC";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, userId);          // Bind userId parameter to SQL query
            ResultSet rs = stmt.executeQuery(); // Execute SELECT query

            while (rs.next()) {
                // Map each row in the ResultSet to a Recipe object
                Recipe r = new Recipe(
                        rs.getInt("recipe_id"),
                        rs.getString("title"),
                        rs.getString("ingredients"),
                        rs.getString("instructions"),
                        rs.getString("category"),
                        rs.getInt("user_id"),
                        rs.getTimestamp("created_at")
                );
                list.add(r); // Add recipe to the result list
            }

        } catch (SQLException e) {
            System.err.println("‚ùå Error fetching recipes: " + e.getMessage());
        }

        return list;
    }

    /**
     * Retrieves a recipe from the database using its unique ID.
     *
     * @param recipeId The ID of the recipe to fetch
     * @return Recipe object if found, null otherwise
     * @throws ClassNotFoundException if the JDBC driver is not found
     */
    public Recipe getRecipeById(int recipeId) throws ClassNotFoundException {
        String sql = "SELECT * FROM recipe WHERE recipe_id = ?";
        Recipe recipe = null;

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, recipeId);         // Bind recipeId parameter
            ResultSet rs = stmt.executeQuery(); // Execute SELECT query

            if (rs.next()) {
                // Map the ResultSet row to a Recipe object
                recipe = new Recipe(
                        rs.getInt("recipe_id"),
                        rs.getString("title"),
                        rs.getString("ingredients"),
                        rs.getString("instructions"),
                        rs.getString("category"),
                        rs.getInt("user_id"),
                        rs.getTimestamp("created_at")
                );
            }

        } catch (SQLException e) {
            System.err.println("‚ùå Error fetching recipe by ID: " + e.getMessage());
        }

        return recipe;
    }

    /**
     * Updates an existing recipe in the database.
     *
     * @param recipe Recipe object containing updated details
     * @throws ClassNotFoundException if the JDBC driver is not found
     */
    public void updateRecipe(Recipe recipe) throws ClassNotFoundException {
        String sql = "UPDATE recipe SET title=?, ingredients=?, instructions=?, category=?, user_id=? WHERE recipe_id=?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            // Bind updated values to the SQL UPDATE query
            stmt.setString(1, recipe.getTitle());
            stmt.setString(2, recipe.getIngredients());
            stmt.setString(3, recipe.getInstructions());
            stmt.setString(4, recipe.getCategory());
            stmt.setInt(5, recipe.getUser_id());
            stmt.setInt(6, recipe.getRecipe_Id()); // Specify recipe to update by ID

            int rows = stmt.executeUpdate(); // Execute the UPDATE statement
            System.out.println("‚úÖ " + rows + " recipe(s) updated.");

        } catch (SQLException e) {
            System.err.println("‚ùå Error updating recipe: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Deletes a recipe from the database by its ID.
     *
     * @param id The ID of the recipe to delete
     * @throws ClassNotFoundException if the JDBC driver is not found
     */
    public void deleteRecipe(int id) throws ClassNotFoundException {
        String sql = "DELETE FROM recipe WHERE recipe_id=?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, id); // Bind recipe ID parameter
            int rows = stmt.executeUpdate(); // Execute DELETE statement
            System.out.println("üóëÔ∏è " + rows + " recipe(s) deleted.");

        } catch (SQLException e) {
            System.err.println("‚ùå Error deleting recipe: " + e.getMessage());
        }
    }
}
